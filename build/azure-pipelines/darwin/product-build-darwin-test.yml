parameters:
  - name: VSCODE_QUALITY
    type: string
  - name: VSCODE_RUN_ELECTRON_TESTS
    type: boolean
  - name: VSCODE_RUN_BROWSER_TESTS
    type: boolean
  - name: VSCODE_RUN_REMOTE_TESTS
    type: boolean
  - name: VSCODE_TEST_ARTIFACT_NAME
    type: string
  - name: PUBLISH_TASK_NAME
    type: string
    default: PublishPipelineArtifact@0

jobs:
  - job: Download
    displayName: Download Electron and Playwright
    steps:
      - script: npm exec -- npm-run-all -lp "electron $(VSCODE_ARCH)" "playwright-install"
        env:
          GITHUB_TOKEN: "$(github-distro-mixin-password)"
        displayName: Download Electron and Playwright
        retryCountOnTaskFailure: 3

  - job: UnitTestsElectron
    displayName: ðŸ§ª Run unit tests (Electron)
    dependsOn: Download
    condition: |
      or(
        and(eq('${{ parameters.VSCODE_QUALITY }}', 'oss'), eq('${{ parameters.VSCODE_RUN_ELECTRON_TESTS }}', true)),
        and(ne('${{ parameters.VSCODE_QUALITY }}', 'oss'), eq('${{ parameters.VSCODE_RUN_ELECTRON_TESTS }}', true))
      )
    steps:
      - ${{ if eq(parameters.VSCODE_QUALITY, 'oss') }}:
        - script: ./scripts/test.sh --tfs "Unit Tests"
          displayName: ðŸ§ª Run unit tests (Electron)
          timeoutInMinutes: 15
        - script: npm run test-node
          displayName: ðŸ§ª Run unit tests (node.js)
          timeoutInMinutes: 15
      - ${{ if ne(parameters.VSCODE_QUALITY, 'oss') }}:
        - script: ./scripts/test.sh --build --tfs "Unit Tests"
          displayName: ðŸ§ª Run unit tests (Electron)
          timeoutInMinutes: 15
        - script: npm run test-node -- --build
          displayName: ðŸ§ª Run unit tests (node.js)
          timeoutInMinutes: 15

  - job: UnitTestsBrowser
    displayName: ðŸ§ª Run unit tests (Browser, Webkit)
    dependsOn: Download
    condition: |
      or(
        and(eq('${{ parameters.VSCODE_QUALITY }}', 'oss'), eq('${{ parameters.VSCODE_RUN_BROWSER_TESTS }}', true)),
        and(ne('${{ parameters.VSCODE_QUALITY }}', 'oss'), eq('${{ parameters.VSCODE_RUN_BROWSER_TESTS }}', true))
      )
    steps:
      - ${{ if eq(parameters.VSCODE_QUALITY, 'oss') }}:
        - script: npm run test-browser-no-install -- --browser webkit --tfs "Browser Unit Tests"
          env:
            DEBUG: "*browser*"
          displayName: ðŸ§ª Run unit tests (Browser, Webkit)
          timeoutInMinutes: 30
      - ${{ if ne(parameters.VSCODE_QUALITY, 'oss') }}:
        - script: npm run test-browser-no-install -- --build --browser webkit --tfs "Browser Unit Tests"
          env:
            DEBUG: "*browser*"
          displayName: ðŸ§ª Run unit tests (Browser, Webkit)
          timeoutInMinutes: 30


  - job: BuildIntegrationTests
    displayName: Build integration tests
    dependsOn: Download
    steps:
      - script: |
          set -e
          npm run gulp \
            compile-extension:configuration-editing \
            compile-extension:css-language-features-server \
            compile-extension:emmet \
            compile-extension:git \
            compile-extension:github-authentication \
            compile-extension:html-language-features-server \
            compile-extension:ipynb \
            compile-extension:notebook-renderers \
            compile-extension:json-language-features-server \
            compile-extension:markdown-language-features \
            compile-extension-media \
            compile-extension:microsoft-authentication \
            compile-extension:typescript-language-features \
            compile-extension:vscode-api-tests \
            compile-extension:vscode-colorize-tests \
            compile-extension:vscode-colorize-perf-tests \
            compile-extension:vscode-test-resolver
        displayName: Build integration tests

  - job: IntegrationTestsElectron
    displayName: ðŸ§ª Run integration tests (Electron)
    dependsOn: BuildIntegrationTests
    condition: |
      or(
        and(eq('${{ parameters.VSCODE_QUALITY }}', 'oss'), eq('${{ parameters.VSCODE_RUN_ELECTRON_TESTS }}', true)),
        and(ne('${{ parameters.VSCODE_QUALITY }}', 'oss'), eq('${{ parameters.VSCODE_RUN_ELECTRON_TESTS }}', true))
      )
    steps:
      - ${{ if eq(parameters.VSCODE_QUALITY, 'oss') }}:
        - script: ./scripts/test-integration.sh --tfs "Integration Tests"
          displayName: ðŸ§ª Run integration tests (Electron)
          timeoutInMinutes: 20
      - ${{ if ne(parameters.VSCODE_QUALITY, 'oss') }}:
        - script: |
            set -e
            APP_ROOT="$(agent.builddirectory)/VSCode-darwin-$(VSCODE_ARCH)"
            APP_NAME="`ls $APP_ROOT | head -n 1`"
            INTEGRATION_TEST_ELECTRON_PATH="$APP_ROOT/$APP_NAME/Contents/MacOS/Electron" \
            ./scripts/test-integration.sh --build --tfs "Integration Tests"
          env:
            VSCODE_REMOTE_SERVER_PATH: $(agent.builddirectory)/vscode-server-darwin-$(VSCODE_ARCH)
          displayName: ðŸ§ª Run integration tests (Electron)
          timeoutInMinutes: 20

  - job: IntegrationTestsBrowser
    displayName: ðŸ§ª Run integration tests (Browser, Webkit)
    dependsOn: BuildIntegrationTests
    condition: |
      or(
        and(eq('${{ parameters.VSCODE_QUALITY }}', 'oss'), eq('${{ parameters.VSCODE_RUN_BROWSER_TESTS }}', true)),
        and(ne('${{ parameters.VSCODE_QUALITY }}', 'oss'), eq('${{ parameters.VSCODE_RUN_BROWSER_TESTS }}', true))
      )
    steps:
      - ${{ if eq(parameters.VSCODE_QUALITY, 'oss') }}:
        - script: ./scripts/test-web-integration.sh --browser webkit
          displayName: ðŸ§ª Run integration tests (Browser, Webkit)
          timeoutInMinutes: 20
      - ${{ if ne(parameters.VSCODE_QUALITY, 'oss') }}:
        - script: ./scripts/test-web-integration.sh --browser webkit
          env:
            VSCODE_REMOTE_SERVER_PATH: $(agent.builddirectory)/vscode-server-darwin-$(VSCODE_ARCH)-web
          displayName: ðŸ§ª Run integration tests (Browser, Webkit)
          timeoutInMinutes: 20

  - job: IntegrationTestsRemote
    displayName: ðŸ§ª Run integration tests (Remote)
    dependsOn: BuildIntegrationTests
    condition: |
      or(
        and(eq('${{ parameters.VSCODE_QUALITY }}', 'oss'), eq('${{ parameters.VSCODE_RUN_REMOTE_TESTS }}', true)),
        and(ne('${{ parameters.VSCODE_QUALITY }}', 'oss'), eq('${{ parameters.VSCODE_RUN_REMOTE_TESTS }}', true))
      )
    steps:
      - ${{ if eq(parameters.VSCODE_QUALITY, 'oss') }}:
        - script: ./scripts/test-remote-integration.sh
          displayName: ðŸ§ª Run integration tests (Remote)
          timeoutInMinutes: 20
      - ${{ if ne(parameters.VSCODE_QUALITY, 'oss') }}:
        - script: |
            set -e
            APP_ROOT=$(agent.builddirectory)/VSCode-darwin-$(VSCODE_ARCH)
            APP_NAME="`ls $APP_ROOT | head -n 1`"
            INTEGRATION_TEST_ELECTRON_PATH="$APP_ROOT/$APP_NAME/Contents/MacOS/Electron" \
            ./scripts/test-remote-integration.sh
          env:
            VSCODE_REMOTE_SERVER_PATH: $(agent.builddirectory)/vscode-server-darwin-$(VSCODE_ARCH)
          displayName: ðŸ§ª Run integration tests (Remote)
          timeoutInMinutes: 20


  - job: DiagnosticsBeforeSmoke
    displayName: Diagnostics before smoke test run
    dependsOn:
      - IntegrationTestsElectron
      - IntegrationTestsBrowser
      - IntegrationTestsRemote
    continueOnError: true
    condition: succeededOrFailed()
    steps:
      - script: ps -ef
        displayName: Diagnostics before smoke test run

  - job: SmokeTestsElectron
    displayName: ðŸ§ª Run smoke tests (Electron)
    dependsOn: DiagnosticsBeforeSmoke
    condition: and(ne('${{ parameters.VSCODE_QUALITY }}', 'oss'), eq('${{ parameters.VSCODE_RUN_ELECTRON_TESTS }}', true))
    steps:
      - script: |
          set -e
          APP_ROOT=$(agent.builddirectory)/VSCode-darwin-$(VSCODE_ARCH)
          APP_NAME="`ls $APP_ROOT | head -n 1`"
          npm run smoketest-no-compile -- --tracing --build "$APP_ROOT/$APP_NAME"
        timeoutInMinutes: 20
        displayName: ðŸ§ª Run smoke tests (Electron)

  - job: SmokeTestsBrowser
    displayName: ðŸ§ª Run smoke tests (Browser, Chromium)
    dependsOn: DiagnosticsBeforeSmoke
    condition: and(ne('${{ parameters.VSCODE_QUALITY }}', 'oss'), eq('${{ parameters.VSCODE_RUN_BROWSER_TESTS }}', true))
    steps:
      - script: npm run smoketest-no-compile -- --web --tracing --headless
        env:
          VSCODE_REMOTE_SERVER_PATH: $(agent.builddirectory)/vscode-server-darwin-$(VSCODE_ARCH)-web
        timeoutInMinutes: 20
        displayName: ðŸ§ª Run smoke tests (Browser, Chromium)

  - job: SmokeTestsRemote
    displayName: ðŸ§ª Run smoke tests (Remote)
    dependsOn: DiagnosticsBeforeSmoke
    condition: and(ne('${{ parameters.VSCODE_QUALITY }}', 'oss'), eq('${{ parameters.VSCODE_RUN_REMOTE_TESTS }}', true))
    steps:
      - script: |
          set -e
          npm run gulp compile-extension:vscode-test-resolver
          APP_ROOT=$(agent.builddirectory)/VSCode-darwin-$(VSCODE_ARCH)
          APP_NAME="`ls $APP_ROOT | head -n 1`"
          npm run smoketest-no-compile -- --tracing --remote --build "$APP_ROOT/$APP_NAME"
        env:
          VSCODE_REMOTE_SERVER_PATH: $(agent.builddirectory)/vscode-server-darwin-$(VSCODE_ARCH)
        timeoutInMinutes: 20
        displayName: ðŸ§ª Run smoke tests (Remote)

  - job: DiagnosticsAfterSmoke
    displayName: Diagnostics after smoke test run
    dependsOn:
      - SmokeTestsElectron
      - SmokeTestsBrowser
      - SmokeTestsRemote
    continueOnError: true
    condition: succeededOrFailed()
    steps:
      - script: ps -ef
        displayName: Diagnostics after smoke test run


  - job: PublishArtifacts
    displayName: Publish Artifacts
    dependsOn:
      - DiagnosticsAfterSmoke
    steps:
      - task: ${{ parameters.PUBLISH_TASK_NAME }}
        inputs:
          targetPath: .build/crashes
          ${{ if eq(parameters.VSCODE_TEST_ARTIFACT_NAME, '') }}:
            artifactName: crash-dump-macos-$(VSCODE_ARCH)-$(System.JobAttempt)
          ${{ else }}:
            artifactName: crash-dump-macos-$(VSCODE_ARCH)-${{ parameters.VSCODE_TEST_ARTIFACT_NAME }}-$(System.JobAttempt)
          sbomEnabled: false
        displayName: "Publish Crash Reports"
        continueOnError: true
        condition: failed()

      - task: ${{ parameters.PUBLISH_TASK_NAME }}
        inputs:
          targetPath: node_modules
          ${{ if eq(parameters.VSCODE_TEST_ARTIFACT_NAME, '') }}:
            artifactName: node-modules-macos-$(VSCODE_ARCH)-$(System.JobAttempt)
          ${{ else }}:
            artifactName: node-modules-macos-$(VSCODE_ARCH)-${{ parameters.VSCODE_TEST_ARTIFACT_NAME }}-$(System.JobAttempt)
          sbomEnabled: false
        displayName: "Publish Node Modules"
        continueOnError: true
        condition: failed()

      - task: ${{ parameters.PUBLISH_TASK_NAME }}
        inputs:
          targetPath: .build/logs
          ${{ if eq(parameters.VSCODE_TEST_ARTIFACT_NAME, '') }}:
            artifactName: logs-macos-$(VSCODE_ARCH)-$(System.JobAttempt)
          ${{ else }}:
            artifactName: logs-macos-$(VSCODE_ARCH)-${{ parameters.VSCODE_TEST_ARTIFACT_NAME }}-$(System.JobAttempt)
          sbomEnabled: false
        displayName: "Publish Log Files"
        continueOnError: true
        condition: succeededOrFailed()

      - task: PublishTestResults@2
        displayName: Publish Tests Results
        inputs:
          testResultsFiles: "*-results.xml"
          searchFolder: "$(Build.ArtifactStagingDirectory)/test-results"
        condition: succeededOrFailed()
